{
  "name": "LINE Chatbot CSDS Advanced",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "line-csds-advanced",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "LINE Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 300],
      "webhookId": "line-csds-advanced"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "a8c3f3a3-e5e5-4e9e-8b4a-6f9d8e3c2a1b",
              "leftValue": "={{ $json.body.events[0].type }}",
              "rightValue": "message",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "name": "Check Message Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "jsCode": "// クエリ分析\nconst userMessage = $input.first().json.body.events[0].message.text;\nconst replyToken = $input.first().json.body.events[0].replyToken;\n\n// クエリタイプの判定\nlet queryType = 'general';\nif (userMessage.match(/こんにちは|おはよう|こんばんは|はじめまして/)) {\n  queryType = 'greeting';\n} else if (userMessage.match(/どうすれば|教えて|困って|悩んで/)) {\n  queryType = 'consultation';\n} else if (userMessage.includes('？') || userMessage.includes('?')) {\n  queryType = 'question';\n}\n\n// キーワード抽出\nconst keywords = userMessage.match(/[\\u4e00-\\u9faf\\u3040-\\u309f\\u30a0-\\u30ff]{2,}/g) || [];\n\nreturn {\n  userMessage,\n  replyToken,\n  queryType,\n  keywords: keywords.slice(0, 5)\n};"
      },
      "name": "Analyze Query",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 280]
    },
    {
      "parameters": {
        "jsCode": "// CSDS Advanced - より自然なチバスタイル生成\nconst { userMessage, replyToken, queryType } = $input.first().json;\n\n// チバスタイル要素\nconst chibaElements = {\n  greetings: ['チバです。', 'チバです、よろしく。', 'どうも、チバです。'],\n  emphasis: ['ガンガン', 'ゴリゴリ', 'バンバン', 'ドンドン', 'ビシバシ'],\n  selfQuestion: ['なぜか？', 'どうしてか？', 'その理由は？', 'なぜそう言えるのか？'],\n  anticipation: [\n    'と思うかもしれません',\n    'と感じるかもしれません',\n    'と考えるかもしれません',\n    'という不安があるかもしれません'\n  ],\n  conclusion: ['結論。', '結論から言うと。', '結論、'],\n  encouragement: [\n    '大丈夫、できます。',\n    'あなたならできる。',\n    '心配いりません。',\n    '必ず成功します。'\n  ]\n};\n\n// クエリタイプ別の応答パターン\nlet response = '';\nconst randomGreeting = chibaElements.greetings[Math.floor(Math.random() * chibaElements.greetings.length)];\n\nif (queryType === 'greeting') {\n  // 挨拶への応答\n  response = `${randomGreeting}\\n\\n`;\n  response += `元気ですか？\\n\\n`;\n  response += `今日も${chibaElements.emphasis[0]}頑張っていきましょう。\\n\\n`;\n  response += `何か相談があれば、遠慮なくどうぞ。`;\n  \n} else if (queryType === 'consultation') {\n  // 相談への応答\n  response = `${randomGreeting}\\n\\n`;\n  response += `「${userMessage}」\\n\\nそんな悩みを持っているんですね。\\n\\n`;\n  \n  const randomQuestion = chibaElements.selfQuestion[Math.floor(Math.random() * chibaElements.selfQuestion.length)];\n  response += `${randomQuestion}\\n\\n`;\n  response += `それは、多くの人が通る道だからです。\\n\\n`;\n  \n  const randomAnticipation = chibaElements.anticipation[Math.floor(Math.random() * chibaElements.anticipation.length)];\n  response += `「自分には無理」${randomAnticipation}。\\n\\n`;\n  \n  const randomEncouragement = chibaElements.encouragement[Math.floor(Math.random() * chibaElements.encouragement.length)];\n  response += `でも、${randomEncouragement}\\n\\n`;\n  \n  const randomConclusion = chibaElements.conclusion[Math.floor(Math.random() * chibaElements.conclusion.length)];\n  response += `${randomConclusion}\\n`;\n  \n  const randomEmphasis = chibaElements.emphasis[Math.floor(Math.random() * chibaElements.emphasis.length)];\n  response += `${randomEmphasis}実践あるのみです。`;\n  \n} else {\n  // 一般的な質問への応答\n  response = `${randomGreeting}\\n\\n`;\n  response += `${userMessage}についてですね。\\n\\n`;\n  \n  const randomQuestion = chibaElements.selfQuestion[Math.floor(Math.random() * chibaElements.selfQuestion.length)];\n  response += `${randomQuestion}\\n\\n`;\n  response += `この質問をする人は、成長したいという意欲がある証拠です。\\n\\n`;\n  \n  const randomConclusion = chibaElements.conclusion[Math.floor(Math.random() * chibaElements.conclusion.length)];\n  response += `${randomConclusion}\\n`;\n  \n  const randomEmphasis = chibaElements.emphasis[Math.floor(Math.random() * chibaElements.emphasis.length)];\n  response += `まずは${randomEmphasis}行動することが大切です。`;\n}\n\n// スコア計算（詳細版）\nlet score = 0;\nconst scoreBreakdown = {};\n\n// 語彙スコア (25点)\nlet vocabularyScore = 0;\nif (response.includes('チバです')) vocabularyScore += 10;\nif (chibaElements.emphasis.some(word => response.includes(word))) vocabularyScore += 10;\nif (response.includes('結論')) vocabularyScore += 5;\nscore += vocabularyScore;\nscoreBreakdown.vocabulary = vocabularyScore;\n\n// 構造スコア (25点)\nlet structureScore = 0;\nif (response.includes('なぜか？') || response.includes('どうしてか？')) structureScore += 10;\nif (response.split('\\n\\n').length >= 3) structureScore += 10;\nif (response.includes('結論')) structureScore += 5;\nscore += structureScore;\nscoreBreakdown.structure = structureScore;\n\n// 修辞スコア (25点)\nlet rhetoricScore = 0;\nif (response.includes('かもしれません')) rhetoricScore += 15;\nif (response.includes('「') && response.includes('」')) rhetoricScore += 10;\nscore += rhetoricScore;\nscoreBreakdown.rhetoric = rhetoricScore;\n\n// 感情スコア (25点)\nlet emotionScore = 0;\nif (chibaElements.encouragement.some(phrase => response.includes(phrase))) emotionScore += 15;\nif (response.includes('大丈夫') || response.includes('できる')) emotionScore += 10;\nscore += emotionScore;\nscoreBreakdown.emotion = emotionScore;\n\nreturn {\n  replyToken,\n  responseText: response,\n  score,\n  scoreBreakdown,\n  queryType,\n  userMessage\n};"
      },
      "name": "Generate CSDS Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 280]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.line.me/v2/bot/message/reply",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $env.LINE_CHANNEL_ACCESS_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"replyToken\": \"{{ $json.replyToken }}\",\n  \"messages\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"{{ $json.responseText }}\"\n    }\n  ]\n}",
        "options": {}
      },
      "name": "Reply to LINE",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1050, 280]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "success"
            },
            {
              "name": "score",
              "value": "={{ $('Generate CSDS Response').item.json.score }}"
            },
            {
              "name": "queryType",
              "value": "={{ $('Generate CSDS Response').item.json.queryType }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Success Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1250, 280]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1450, 280]
    },
    {
      "parameters": {
        "content": "## エラーレスポンス",
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"error\",\n  \"message\": \"Invalid message type\"\n}"
      },
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [650, 400]
    }
  ],
  "connections": {
    "LINE Webhook": {
      "main": [
        [
          {
            "node": "Check Message Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Message Type": {
      "main": [
        [
          {
            "node": "Analyze Query",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Query": {
      "main": [
        [
          {
            "node": "Generate CSDS Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate CSDS Response": {
      "main": [
        [
          {
            "node": "Reply to LINE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply to LINE": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}