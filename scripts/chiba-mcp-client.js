#!/usr/bin/env node

/**
 * Chiba Chatbot MCP Client
 * Claude Code <-> n8n MCP ServerÁµ±Âêà
 */

const { MCPServer } = require('@modelcontextprotocol/server');
const { StdioServerTransport } = require('@modelcontextprotocol/server/stdio');

class ChibaMCPClient {
  constructor() {
    this.server = new MCPServer(
      {
        name: "chiba-chatbot-client",
        version: "1.0.0"
      },
      {
        capabilities: {
          tools: {}
        }
      }
    );

    this.n8nUrl = process.env.N8N_MCP_URL || 'https://your-n8n-instance.railway.app';
    this.n8nToken = process.env.N8N_MCP_TOKEN || 'chiba-bot-secret-2024';
    this.setupTools();
  }

  setupTools() {
    // „ÉÅ„ÉêÊ§úÁ¥¢„ÉÑ„Éº„É´
    this.server.setRequestHandler('tools/list', async () => {
      return {
        tools: [
          {
            name: "chiba_search",
            description: "„ÉÅ„Éê„ÅÆÁü•Ë≠ò„Éô„Éº„Çπ„Åã„ÇâÈñ¢ÈÄ£ÊÉÖÂ†±„ÇíÊ§úÁ¥¢",
            inputSchema: {
              type: "object",
              properties: {
                query: {
                  type: "string",
                  description: "Ê§úÁ¥¢„ÇØ„Ç®„É™Ôºà„Éä„É≥„Éë„ÄÅÊÅãÊÑõÁõ∏Ë´á„Å™„Å©Ôºâ"
                },
                max_results: {
                  type: "number",
                  description: "ÊúÄÂ§ßÁµêÊûúÊï∞Ôºà„Éá„Éï„Ç©„É´„Éà: 5Ôºâ",
                  default: 5
                }
              },
              required: ["query"]
            }
          },
          {
            name: "chiba_response",
            description: "„ÉÅ„Éê„ÅÆÁü•Ë≠ò„Å®„Éö„É´„ÇΩ„Éä„ÅßË©≥Á¥∞ÂõûÁ≠î„ÇíÁîüÊàê",
            inputSchema: {
              type: "object", 
              properties: {
                query: {
                  type: "string",
                  description: "„É¶„Éº„Ç∂„Éº„ÅÆË≥™Âïè"
                },
                context: {
                  type: "array",
                  description: "Ê§úÁ¥¢„ÅßÂèñÂæó„Åó„ÅüÈñ¢ÈÄ£Áü•Ë≠ò",
                  items: {
                    type: "object"
                  }
                }
              },
              required: ["query"]
            }
          },
          {
            name: "chiba_workflow_update",
            description: "n8n„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÇíÂãïÁöÑ„Å´Êõ¥Êñ∞",
            inputSchema: {
              type: "object",
              properties: {
                workflow_id: {
                  type: "string", 
                  description: "Êõ¥Êñ∞ÂØæË±°„ÅÆ„ÉØ„Éº„ÇØ„Éï„É≠„ÉºID"
                },
                updates: {
                  type: "object",
                  description: "Êõ¥Êñ∞ÂÜÖÂÆπÔºà„Éé„Éº„ÉâË®≠ÂÆö„Å™„Å©Ôºâ"
                }
              },
              required: ["workflow_id", "updates"]
            }
          }
        ]
      };
    });

    // „ÉÑ„Éº„É´ÂÆüË°å„Éè„É≥„Éâ„É©„Éº
    this.server.setRequestHandler('tools/call', async (request) => {
      const { name, arguments: args } = request.params;

      switch (name) {
        case 'chiba_search':
          return await this.chibaSearch(args.query, args.max_results || 5);
        
        case 'chiba_response':
          return await this.chibaResponse(args.query, args.context);
        
        case 'chiba_workflow_update':
          return await this.updateWorkflow(args.workflow_id, args.updates);
        
        default:
          throw new Error(`Unknown tool: ${name}`);
      }
    });
  }

  // „ÉÅ„ÉêÊ§úÁ¥¢ÂÆüË°å
  async chibaSearch(query, maxResults = 5) {
    try {
      const response = await fetch(`${this.n8nUrl}/webhook/chiba-search`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.n8nToken}`
        },
        body: JSON.stringify({
          query: query,
          max_results: maxResults
        })
      });

      if (!response.ok) {
        throw new Error(`n8n Search Error: ${response.status}`);
      }

      const results = await response.json();
      
      return {
        content: [
          {
            type: "text",
            text: `Ê§úÁ¥¢„ÇØ„Ç®„É™: "${query}"\\n\\nÊ§úÁ¥¢ÁµêÊûú (${results.length}‰ª∂):\\n\\n${results.map((r, i) => 
              `${i+1}. **${r.title}**\\n   È°û‰ººÂ∫¶: ${(r.score || 0).toFixed(2)}\\n   Ë¶ÅÁ¥Ñ: ${r.summary || r.content.substring(0, 100)}...`
            ).join('\\n\\n')}`
          }
        ]
      };
      
    } catch (error) {
      return {
        content: [
          {
            type: "text", 
            text: `‚ùå Ê§úÁ¥¢„Ç®„É©„Éº: ${error.message}`
          }
        ],
        isError: true
      };
    }
  }

  // „ÉÅ„Éê„É¨„Çπ„Éù„É≥„ÇπÁîüÊàê
  async chibaResponse(query, context = []) {
    try {
      const response = await fetch(`${this.n8nUrl}/webhook/chiba-response`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.n8nToken}`
        },
        body: JSON.stringify({
          query: query,
          context: context
        })
      });

      if (!response.ok) {
        throw new Error(`n8n Response Error: ${response.status}`);
      }

      const result = await response.json();
      
      return {
        content: [
          {
            type: "text",
            text: `**„ÉÅ„Éê„Åã„Çâ„ÅÆÂõûÁ≠î:**\\n\\n${result.response}\\n\\n---\\n*ÂèÇËÄÉ„Éá„Éº„Çø: ${context.length}‰ª∂*`
          }
        ]
      };
      
    } catch (error) {
      return {
        content: [
          {
            type: "text",
            text: `‚ùå „É¨„Çπ„Éù„É≥„ÇπÁîüÊàê„Ç®„É©„Éº: ${error.message}`
          }
        ],
        isError: true
      };
    }
  }

  // „ÉØ„Éº„ÇØ„Éï„É≠„ÉºÊõ¥Êñ∞
  async updateWorkflow(workflowId, updates) {
    try {
      const response = await fetch(`${this.n8nUrl}/api/v1/workflows/${workflowId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-N8N-API-KEY': this.n8nToken
        },
        body: JSON.stringify(updates)
      });

      if (!response.ok) {
        throw new Error(`Workflow Update Error: ${response.status}`);
      }

      const result = await response.json();
      
      return {
        content: [
          {
            type: "text",
            text: `‚úÖ „ÉØ„Éº„ÇØ„Éï„É≠„ÉºÊõ¥Êñ∞ÂÆå‰∫Ü\\nID: ${workflowId}\\nÊõ¥Êñ∞ÂÜÖÂÆπ: ${JSON.stringify(updates, null, 2)}`
          }
        ]
      };
      
    } catch (error) {
      return {
        content: [
          {
            type: "text",
            text: `‚ùå „ÉØ„Éº„ÇØ„Éï„É≠„ÉºÊõ¥Êñ∞„Ç®„É©„Éº: ${error.message}`
          }
        ],
        isError: true
      };
    }
  }

  // MCP„Çµ„Éº„Éê„ÉºÈñãÂßã
  async start() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    console.error('üöÄ Chiba MCP Client „ÅåÈñãÂßã„Åï„Çå„Åæ„Åó„Åü');
  }
}

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// „É°„Ç§„É≥ÂÆüË°å
if (require.main === module) {
  const client = new ChibaMCPClient();
  client.start().catch((error) => {
    console.error('‚ùå MCP Client Start Error:', error);
    process.exit(1);
  });
}

module.exports = ChibaMCPClient;