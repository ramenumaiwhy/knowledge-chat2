{
  "name": "LINE Chatbot Ultimate with AI",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "line-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook",
      "name": "LINE Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "line-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.body.events[0].message.text }}",
              "operation": "regex",
              "value2": "(こんにちは|こんばんは|おはよう|はじめまして|よろしく|ちわ|やあ)"
            }
          ]
        }
      },
      "id": "greetingCheck",
      "name": "挨拶チェック",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "jsCode": "// 挨拶専用の返答を生成\nconst greetings = [\n  'チバです！今日も元気にガンガンいきましょう！',\n  'おっす！チバです。何か聞きたいことあったらドンドン聞いてください！',\n  'チバです。よろしく！ナンパのことなら任せてください！'\n];\n\nconst randomGreeting = greetings[Math.floor(Math.random() * greetings.length)];\n\nreturn {\n  replyToken: $input.first().json.body.events[0].replyToken,\n  message: randomGreeting,\n  isGreeting: true\n};"
      },
      "id": "greetingResponse",
      "name": "挨拶返答生成",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [650, 200]
    },
    {
      "parameters": {
        "jsCode": "// メッセージタイプを分析\nconst message = $json.body.events[0].message.text;\nconst replyToken = $json.body.events[0].replyToken;\n\n// メッセージ長による分類\nconst messageLength = message.length;\nlet queryType = 'general';\n\nif (messageLength <= 5) {\n  queryType = 'keyword';\n} else if (message.includes('？') || message.includes('?')) {\n  queryType = 'question';\n} else if (message.includes('教えて') || message.includes('知りたい')) {\n  queryType = 'consultation';\n}\n\n// 緊急度チェック\nconst urgentKeywords = ['今すぐ', 'すぐに', '緊急', '急いで'];\nconst isUrgent = urgentKeywords.some(keyword => message.includes(keyword));\n\n// 場所の検出\nconst locations = ['渋谷', '新宿', '恵比寿', '六本木', '池袋', '銀座'];\nconst detectedLocation = locations.find(loc => message.includes(loc));\n\nreturn {\n  originalMessage: message,\n  replyToken,\n  queryType,\n  isUrgent,\n  location: detectedLocation || null,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "messageAnalyzer",
      "name": "メッセージ分析",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [450, 400]
    },
    {
      "parameters": {
        "jsCode": "// 類義語展開とクエリ拡張\nconst SYNONYMS = {\n  'ナンパ': ['声かけ', 'アプローチ', 'ストリートナンパ', 'ストナン', '声掛け'],\n  '女性': ['女', '女の子', '女子', 'ガール', 'レディ', '女の人'],\n  'デート': ['アポ', 'アポイント', '約束', 'お茶', '飲み', '食事'],\n  'コツ': ['方法', 'やり方', 'テクニック', '秘訣', 'ポイント', 'ノウハウ'],\n  'LINE': ['ライン', '連絡先', 'メッセージ', 'トーク'],\n  '成功': ['うまくいく', '成功', 'ゲット', '成果', '結果'],\n  '失敗': ['うまくいかない', '失敗', 'ミス', 'ダメ', '断られ'],\n  '初心者': ['初心者', 'ビギナー', '初めて', '新人', '素人']\n};\n\n// クエリを展開\nfunction expandQuery(text) {\n  let expanded = [text];\n  \n  for (const [key, synonyms] of Object.entries(SYNONYMS)) {\n    if (text.includes(key)) {\n      synonyms.forEach(syn => {\n        expanded.push(text.replace(key, syn));\n      });\n    }\n  }\n  \n  // 重複を削除\n  return [...new Set(expanded)];\n}\n\nconst expandedQueries = expandQuery($json.originalMessage);\n\n// キーワード抽出（重要な単語を抽出）\nconst keywords = [];\nfor (const [key, synonyms] of Object.entries(SYNONYMS)) {\n  if ($json.originalMessage.includes(key)) {\n    keywords.push(key);\n  }\n  synonyms.forEach(syn => {\n    if ($json.originalMessage.includes(syn)) {\n      keywords.push(key); // 元のキーワードに統一\n    }\n  });\n}\n\nreturn {\n  ...$json,\n  expandedQueries,\n  extractedKeywords: [...new Set(keywords)],\n  searchStrategies: ['exact', 'and', 'or', 'fuzzy']\n};"
      },
      "id": "queryExpander",
      "name": "クエリ拡張",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [650, 400]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "=https://api.github.com/repos/{{ $env.GITHUB_OWNER }}/{{ $env.GITHUB_REPO }}/contents/data/knowledge.csv",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=token {{ $env.GITHUB_TOKEN }}"
            },
            {
              "name": "Accept",
              "value": "application/vnd.github.v3+json"
            }
          ]
        },
        "options": {}
      },
      "id": "getCSV",
      "name": "CSV取得",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [850, 400]
    },
    {
      "parameters": {
        "jsCode": "// 高度な検索アルゴリズム\nconst csvContent = $('CSV取得').first().json.content;\nconst csvData = Buffer.from(csvContent, 'base64').toString('utf-8');\n\n// CSVパース\nfunction parseCSV(csv) {\n  const lines = csv.split('\\n');\n  const headers = lines[0].split(',').map(h => h.trim());\n  const data = [];\n  \n  for (let i = 1; i < lines.length; i++) {\n    if (!lines[i].trim()) continue;\n    \n    const values = [];\n    let current = '';\n    let inQuotes = false;\n    \n    for (let j = 0; j < lines[i].length; j++) {\n      const char = lines[i][j];\n      if (char === '\"') {\n        inQuotes = !inQuotes;\n      } else if (char === ',' && !inQuotes) {\n        values.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    values.push(current.trim());\n    \n    const row = {};\n    headers.forEach((header, index) => {\n      row[header] = values[index] || '';\n    });\n    data.push(row);\n  }\n  return data;\n}\n\nconst data = parseCSV(csvData);\nconst queryData = $('クエリ拡張').first().json;\nconst results = [];\n\n// スコアリング関数\nfunction calculateScore(row, query, strategy) {\n  let score = 0;\n  const lowerQuery = query.toLowerCase();\n  \n  // カテゴリマッチ（20点）\n  if (row.category && row.category.toLowerCase().includes(lowerQuery)) {\n    score += 20;\n  }\n  \n  // 質問マッチ（15点）\n  if (row.question && row.question.toLowerCase().includes(lowerQuery)) {\n    score += 15;\n  }\n  \n  // キーワードマッチ（10点）\n  if (row.keywords) {\n    try {\n      const keywords = JSON.parse(row.keywords);\n      if (keywords.some(k => k.toLowerCase().includes(lowerQuery))) {\n        score += 10;\n      }\n    } catch (e) {\n      if (row.keywords.toLowerCase().includes(lowerQuery)) {\n        score += 10;\n      }\n    }\n  }\n  \n  // 回答マッチ（5点）\n  if (row.answer && row.answer.toLowerCase().includes(lowerQuery)) {\n    score += 5;\n  }\n  \n  // 戦略ボーナス\n  if (strategy === 'exact' && score > 0) score *= 2;\n  if (strategy === 'fuzzy') score *= 0.7;\n  \n  // 場所ボーナス\n  if (queryData.location && row.answer && row.answer.includes(queryData.location)) {\n    score += 10;\n  }\n  \n  // 緊急度ボーナス\n  if (queryData.isUrgent) {\n    score *= 1.5;\n  }\n  \n  return Math.round(score);\n}\n\n// 各戦略で検索\nqueryData.expandedQueries.forEach(query => {\n  data.forEach(row => {\n    const score = calculateScore(row, query, 'mixed');\n    if (score > 0) {\n      results.push({\n        ...row,\n        score,\n        matchedQuery: query,\n        strategy: 'mixed'\n      });\n    }\n  });\n});\n\n// 重複削除とソート\nconst uniqueResults = [];\nconst seen = new Set();\n\nresults\n  .sort((a, b) => b.score - a.score)\n  .forEach(result => {\n    const key = result.id || result.question;\n    if (!seen.has(key)) {\n      seen.add(key);\n      uniqueResults.push(result);\n    }\n  });\n\n// 上位10件を返す\nreturn {\n  ...queryData,\n  searchResults: uniqueResults.slice(0, 10),\n  totalFound: uniqueResults.length,\n  hasResults: uniqueResults.length > 0\n};"
      },
      "id": "advancedSearch",
      "name": "高度な検索",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1050, 400]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "no-results",
                    "leftValue": "={{ $json.hasResults }}",
                    "rightValue": false,
                    "operator": {
                      "type": "boolean",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "outputKey": "noResults"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "low-score",
                    "leftValue": "={{ $json.searchResults[0].score }}",
                    "rightValue": 10,
                    "operator": {
                      "type": "number",
                      "operation": "lt"
                    }
                  }
                ],
                "combinator": "and"
              },
              "outputKey": "lowConfidence"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "high-score",
                    "leftValue": "={{ $json.searchResults[0].score }}",
                    "rightValue": 30,
                    "operator": {
                      "type": "number",
                      "operation": "gte"
                    }
                  }
                ],
                "combinator": "and"
              },
              "outputKey": "highConfidence"
            }
          ]
        },
        "options": {
          "fallbackOutput": "fixed",
          "fallbackOutputFixed": "mediumConfidence"
        }
      },
      "id": "confidenceRouter",
      "name": "信頼度ルーター",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [1250, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent",
        "authentication": "none",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "={{ $env.GEMINI_API_KEY }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [{\n    \"parts\": [{\n      \"text\": \"あなたはチバという名前の恋愛コンサルタントです。以下の特徴を持って回答してください：\\n\\n【性格】\\n- 親しみやすく、エネルギッシュ\\n- 具体的で実践的なアドバイスをする\\n- 失敗を恐れない前向きな姿勢\\n\\n【話し方】\\n- 『ガンガン』『ドンドン』などの擬音語を使う\\n- 短い文章で歯切れよく\\n- 時々『なぜか？』と自問自答する\\n\\nユーザーの質問: {{ $json.originalMessage }}\\n\\n参考情報（信頼度: 高）：\\n{{ $json.searchResults.slice(0, 3).map(r => `- ${r.question}: ${r.answer} (スコア: ${r.score})`).join('\\\\n') }}\\n\\n具体的で実践的なアドバイスを200文字程度でお願いします。\"\n    }]\n  }]\n}",
        "options": {}
      },
      "id": "geminiHighConfidence",
      "name": "Gemini API (高信頼度)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1450, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent",
        "authentication": "none",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "={{ $env.GEMINI_API_KEY }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [{\n    \"parts\": [{\n      \"text\": \"あなたはチバという恋愛コンサルタントです。\\n\\nユーザーの質問: {{ $json.originalMessage }}\\n\\n参考情報（信頼度: 中）：\\n{{ $json.searchResults.slice(0, 2).map(r => `- ${r.answer?.substring(0, 100)}... (関連度: ${r.score})`).join('\\\\n') }}\\n\\n情報が限定的ですが、一般的なアドバイスを含めて回答してください。『参考情報が少ないですが』という前置きをして、150文字程度で回答してください。\"\n    }]\n  }]\n}",
        "options": {}
      },
      "id": "geminiMediumConfidence",
      "name": "Gemini API (中信頼度)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1450, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent",
        "authentication": "none",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "={{ $env.GEMINI_API_KEY }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [{\n    \"parts\": [{\n      \"text\": \"あなたはチバという恋愛コンサルタントです。\\n\\nユーザーの質問: {{ $json.originalMessage }}\\n\\n申し訳ございません、データベースから直接的な情報が見つかりませんでした。\\n\\nしかし、一般的なアドバイスとして回答します。チバらしく元気に、100文字程度で回答してください。最後に『詳しくは個別相談で！』と付け加えてください。\"\n    }]\n  }]\n}",
        "options": {}
      },
      "id": "geminiNoResults",
      "name": "Gemini API (結果なし)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1450, 500]
    },
    {
      "parameters": {
        "operation": "inject",
        "textField": "={{ $json.candidates[0].content.parts[0].text }}",
        "styleIntensity": 0.8,
        "queryType": "={{ $('メッセージ分析').item.json.queryType }}"
      },
      "id": "chibaStyle",
      "name": "チバスタイル注入",
      "type": "ChibaStyle",
      "typeVersion": 1,
      "position": [1650, 400]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "finalMessage",
              "value": "={{ $json.styledText || $json.candidates[0].content.parts[0].text }}"
            },
            {
              "name": "replyToken",
              "value": "={{ $('メッセージ分析').item.json.replyToken }}"
            }
          ],
          "number": [
            {
              "name": "confidence",
              "value": "={{ $('高度な検索').item.json.searchResults[0]?.score || 0 }}"
            }
          ],
          "boolean": [
            {
              "name": "hasChivaStyle",
              "value": "={{ $json.validation?.isAuthentic || false }}"
            }
          ]
        },
        "options": {}
      },
      "id": "dataAggregator",
      "name": "データ集約",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [1850, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.line.me/v2/bot/message/reply",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $env.LINE_CHANNEL_ACCESS_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"replyToken\": \"{{ $json.replyToken }}\",\n  \"messages\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"{{ $json.finalMessage }}\"\n    }\n  ]\n}",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "lineReply",
      "name": "LINE返信",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [2050, 400]
    },
    {
      "parameters": {
        "respondWith": "noData"
      },
      "id": "webhookResponse",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2250, 400]
    },
    {
      "parameters": {
        "level": "warning",
        "message": "=検索エラー: {{ $json.error.message }}",
        "additionalFields": {
          "metadata": "={{ { query: $('メッセージ分析').item.json.originalMessage, timestamp: new Date().toISOString() } }}"
        }
      },
      "id": "errorLogger",
      "name": "エラーログ",
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [1050, 600]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://discord.com/api/webhooks/{{ $env.DISCORD_WEBHOOK_URL }}",
        "authentication": "none",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"content\": \"🔔 新しい質問\\n**ユーザー**: {{ $('メッセージ分析').item.json.originalMessage }}\\n**回答信頼度**: {{ $json.confidence }}\\n**タイプ**: {{ $('メッセージ分析').item.json.queryType }}\\n**場所**: {{ $('メッセージ分析').item.json.location || 'なし' }}\"\n}",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "discordNotify",
      "name": "Discord通知 (オプション)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [2050, 500]
    }
  ],
  "connections": {
    "LINE Webhook": {
      "main": [
        [
          {
            "node": "挨拶チェック",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "挨拶チェック": {
      "main": [
        [
          {
            "node": "挨拶返答生成",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "メッセージ分析",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "メッセージ分析": {
      "main": [
        [
          {
            "node": "クエリ拡張",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "クエリ拡張": {
      "main": [
        [
          {
            "node": "CSV取得",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CSV取得": {
      "main": [
        [
          {
            "node": "高度な検索",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "高度な検索": {
      "main": [
        [
          {
            "node": "信頼度ルーター",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "信頼度ルーター": {
      "main": [
        [
          {
            "node": "Gemini API (結果なし)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Gemini API (中信頼度)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Gemini API (中信頼度)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Gemini API (高信頼度)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini API (高信頼度)": {
      "main": [
        [
          {
            "node": "チバスタイル注入",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini API (中信頼度)": {
      "main": [
        [
          {
            "node": "チバスタイル注入",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini API (結果なし)": {
      "main": [
        [
          {
            "node": "チバスタイル注入",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "チバスタイル注入": {
      "main": [
        [
          {
            "node": "データ集約",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "データ集約": {
      "main": [
        [
          {
            "node": "LINE返信",
            "type": "main",
            "index": 0
          },
          {
            "node": "Discord通知 (オプション)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LINE返信": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "挨拶返答生成": {
      "main": [
        [
          {
            "node": "LINE返信",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "エラーログ": {
      "main": [
        [
          {
            "node": "Gemini API (結果なし)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "id": "ultimate-workflow"
}